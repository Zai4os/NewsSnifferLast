#!/usr/bin/env python3
"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è NewsSniffer
"""

import sqlite3
import json
import csv
from datetime import datetime, timedelta
from typing import List, Dict, Any
import argparse
import sys

from config import Config
from database import DatabaseManager

class NewsSnifferUtils:
    def __init__(self):
        self.db = DatabaseManager(Config.DATABASE_PATH)
    
    def export_statistics(self, days: int = 30, format: str = 'json') -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ JSON –∏–ª–∏ CSV"""
        stats = self.db.get_statistics(days)
        
        if format.lower() == 'json':
            return self._export_to_json(stats)
        elif format.lower() == 'csv':
            return self._export_to_csv(stats)
        else:
            raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: json, csv")
    
    def _export_to_json(self, stats: List) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON"""
        data = []
        for row in stats:
            data.append({
                'date': row[0],
                'posts_processed': row[1],
                'posts_published': row[2],
                'posts_filtered': row[3]
            })
        
        filename = f"stats_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        return filename
    
    def _export_to_csv(self, stats: List) -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"""
        filename = f"stats_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        with open(filename, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(['–î–∞—Ç–∞', '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ', '–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ', '–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ'])
            writer.writerows(stats)
        
        return filename
    
    def cleanup_old_posts(self, days: int = 30) -> int:
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –ø–æ—Å—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with sqlite3.connect(Config.DATABASE_PATH) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    DELETE FROM processed_posts 
                    WHERE processed_date < datetime('now', '-{} days')
                '''.format(days))
                
                deleted_count = cursor.rowcount
                conn.commit()
                
                print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ {days} –¥–Ω–µ–π)")
                return deleted_count
                
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return 0
    
    def get_channel_statistics(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
        try:
            with sqlite3.connect(Config.DATABASE_PATH) as conn:
                cursor = conn.cursor()
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º
                cursor.execute('''
                    SELECT 
                        channel_username,
                        COUNT(*) as total_posts,
                        SUM(CASE WHEN is_published = 1 THEN 1 ELSE 0 END) as published_posts,
                        MAX(processed_date) as last_processed
                    FROM processed_posts 
                    GROUP BY channel_username
                    ORDER BY total_posts DESC
                ''')
                
                results = cursor.fetchall()
                
                stats = {}
                for row in results:
                    channel, total, published, last_processed = row
                    stats[channel] = {
                        'total_posts': total,
                        'published_posts': published,
                        'filtered_posts': total - published,
                        'last_processed': last_processed,
                        'publish_rate': round((published / total) * 100, 1) if total > 0 else 0
                    }
                
                return stats
                
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return {}
    
    def reset_channel(self, channel_username: str) -> bool:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–Ω–∞–ª–∞ (—É–¥–∞–ª—è–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã)"""
        try:
            with sqlite3.connect(Config.DATABASE_PATH) as conn:
                cursor = conn.cursor()
                
                # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
                cursor.execute(
                    "DELETE FROM processed_posts WHERE channel_username = ?",
                    (channel_username,)
                )
                
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º last_message_id
                cursor.execute(
                    "UPDATE channel_settings SET last_message_id = 0 WHERE channel_username = ?",
                    (channel_username,)
                )
                
                conn.commit()
                
                print(f"‚úÖ –ö–∞–Ω–∞–ª {channel_username} —Å–±—Ä–æ—à–µ–Ω")
                return True
                
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    def add_channel(self, channel_username: str) -> bool:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        if not channel_username.startswith('@'):
            channel_username = '@' + channel_username
        
        try:
            self.db.add_channel(channel_username)
            print(f"‚úÖ –ö–∞–Ω–∞–ª {channel_username} –¥–æ–±–∞–≤–ª–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    def remove_channel(self, channel_username: str) -> bool:
        """–£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        try:
            with sqlite3.connect(Config.DATABASE_PATH) as conn:
                cursor = conn.cursor()
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–Ω–∞–ª
                cursor.execute(
                    "UPDATE channel_settings SET is_active = 0 WHERE channel_username = ?",
                    (channel_username,)
                )
                
                conn.commit()
                
                print(f"‚úÖ –ö–∞–Ω–∞–ª {channel_username} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                return True
                
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")
            return False
    
    def list_channels(self) -> List[Dict]:
        """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            with sqlite3.connect(Config.DATABASE_PATH) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT 
                        cs.channel_username,
                        cs.last_message_id,
                        cs.is_active,
                        cs.added_date,
                        COUNT(pp.id) as posts_count
                    FROM channel_settings cs
                    LEFT JOIN processed_posts pp ON cs.channel_username = pp.channel_username
                    GROUP BY cs.channel_username
                    ORDER BY cs.added_date DESC
                ''')
                
                results = cursor.fetchall()
                
                channels = []
                for row in results:
                    username, last_msg_id, is_active, added_date, posts_count = row
                    channels.append({
                        'username': username,
                        'last_message_id': last_msg_id,
                        'is_active': bool(is_active),
                        'added_date': added_date,
                        'posts_count': posts_count
                    })
                
                return channels
                
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤: {e}")
            return []
    
    def backup_database(self) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        import shutil
        
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_filename = f"news_sniffer_backup_{timestamp}.db"
        
        try:
            shutil.copy2(Config.DATABASE_PATH, backup_filename)
            print(f"‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: {backup_filename}")
            return backup_filename
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
            return ""
    
    def restore_database(self, backup_filename: str) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
        import shutil
        import os
        
        if not os.path.exists(backup_filename):
            print(f"‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {backup_filename}")
            return False
        
        try:
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –ë–î
            current_backup = self.backup_database()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            shutil.copy2(backup_filename, Config.DATABASE_PATH)
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ {backup_filename}")
            print(f"üìÅ –¢–µ–∫—É—â–∞—è –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ {current_backup}")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def show_recent_posts(self, limit: int = 10) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã"""
        try:
            with sqlite3.connect(Config.DATABASE_PATH) as conn:
                cursor = conn.cursor()
                
                cursor.execute('''
                    SELECT 
                        channel_username,
                        message_id,
                        LEFT(message_text, 100) as preview,
                        processed_date,
                        is_published
                    FROM processed_posts 
                    ORDER BY processed_date DESC 
                    LIMIT ?
                ''', (limit,))
                
                results = cursor.fetchall()
                
                if not results:
                    print("üì≠ –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
                    return
                
                print(f"üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ {len(results)} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤:")
                print("-" * 80)
                
                for row in results:
                    channel, msg_id, preview, processed_date, is_published = row
                    status = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω" if is_published else "üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω"
                    
                    print(f"üì∫ {channel} | ID: {msg_id} | {status}")
                    print(f"üìÖ {processed_date}")
                    print(f"üìù {preview}...")
                    print("-" * 80)
                    
        except sqlite3.Error as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤: {e}")

def main():
    """CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É—Ç–∏–ª–∏—Ç"""
    parser = argparse.ArgumentParser(description='NewsSniffer Utilities')
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    export_parser = subparsers.add_parser('export', help='–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
    export_parser.add_argument('--days', type=int, default=30, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π')
    export_parser.add_argument('--format', choices=['json', 'csv'], default='json', help='–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞')
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤
    cleanup_parser = subparsers.add_parser('cleanup', help='–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ—Å—Ç–æ–≤')
    cleanup_parser.add_argument('--days', type=int, default=30, help='–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç—ã —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
    subparsers.add_parser('channels', help='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º')
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞–º–∏
    add_parser = subparsers.add_parser('add-channel', help='–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª')
    add_parser.add_argument('channel', help='Username –∫–∞–Ω–∞–ª–∞')
    
    remove_parser = subparsers.add_parser('remove-channel', help='–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª')
    remove_parser.add_argument('channel', help='Username –∫–∞–Ω–∞–ª–∞')
    
    reset_parser = subparsers.add_parser('reset-channel', help='–°–±—Ä–æ—Å–∏—Ç—å –∫–∞–Ω–∞–ª')
    reset_parser.add_argument('channel', help='Username –∫–∞–Ω–∞–ª–∞')
    
    # –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    subparsers.add_parser('backup', help='–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î')
    
    restore_parser = subparsers.add_parser('restore', help='–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î')
    restore_parser.add_argument('backup_file', help='–§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')
    
    # –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–æ–≤
    posts_parser = subparsers.add_parser('recent', help='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã')
    posts_parser.add_argument('--limit', type=int, default=10, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    utils = NewsSnifferUtils()
    
    try:
        if args.command == 'export':
            filename = utils.export_statistics(args.days, args.format)
            print(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ {filename}")
            
        elif args.command == 'cleanup':
            utils.cleanup_old_posts(args.days)
            
        elif args.command == 'channels':
            stats = utils.get_channel_statistics()
            if stats:
                print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º:")
                print("-" * 80)
                for channel, data in stats.items():
                    print(f"üì∫ {channel}")
                    print(f"   –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {data['total_posts']}")
                    print(f"   –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {data['published_posts']}")
                    print(f"   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ: {data['filtered_posts']}")
                    print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {data['publish_rate']}%")
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞: {data['last_processed']}")
                    print("-" * 80)
            else:
                print("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–Ω–∞–ª–∞–º")
                
        elif args.command == 'add-channel':
            utils.add_channel(args.channel)
            
        elif args.command == 'remove-channel':
            utils.remove_channel(args.channel)
            
        elif args.command == 'reset-channel':
            utils.reset_channel(args.channel)
            
        elif args.command == 'backup':
            utils.backup_database()
            
        elif args.command == 'restore':
            utils.restore_database(args.backup_file)
            
        elif args.command == 'recent':
            utils.show_recent_posts(args.limit)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
