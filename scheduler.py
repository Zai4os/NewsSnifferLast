import asyncio
import schedule
import time
import logging
from datetime import datetime, timedelta
from typing import Optional
import threading
from telegram_client import TelegramNewsClient
from config import Config

class NewsScheduler:
    def __init__(self):
        self.telegram_client = TelegramNewsClient()
        self.is_running = False
        self.scheduler_thread = None
        self.loop = None
        
    async def initialize(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
            if not await self.telegram_client.initialize():
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å Telegram –∫–ª–∏–µ–Ω—Ç")
                return False
            
            logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
            return False
    
    async def run_news_collection(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            logging.info("–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–µ—Ä–µ—Å—ã–ª–∫—É –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
            start_time = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            if not await self.telegram_client.test_connection():
                logging.error("–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∫–∞–Ω–∞–ª—ã
            results = await self.telegram_client.process_all_channels()
            
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            
            logging.info(f"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ {duration:.1f} —Å–µ–∫—É–Ω–¥")
            logging.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {results.get('processed', 0)}, "
                        f"–ø–µ—Ä–µ—Å–ª–∞–Ω–æ {results.get('forwarded', 0)}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ª–æ–≥
            await self._send_statistics_if_needed(results)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
    
    async def _send_statistics_if_needed(self, results: dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–∞–Ω–∞–ª, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"""
        try:
            total_activity = results.get('forwarded', 0)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥ —Ñ–∞–π–ª, –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª
            if total_activity > 0:
                logging.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {results.get('processed', 0)}, "
                           f"–ø–µ—Ä–µ—Å–ª–∞–Ω–æ {results.get('forwarded', 0)} –ø–æ—Å—Ç–æ–≤")
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    async def start_daemon(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω —Å –ø—Ä–æ—Å—Ç—ã–º —Ü–∏–∫–ª–æ–º"""
        logging.info("üöÄ NewsSniffer –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞")
        logging.info(f"üìÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {Config.CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç")
        if Config.CHECK_INTERVAL_MINUTES < 1:
            logging.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—á–µ–Ω—å —á–∞—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–º–µ–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã). –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ª–∏–º–∏—Ç–∞–º–∏ Telegram API!")
        logging.info(f"üì∫ –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –∫–∞–Ω–∞–ª–æ–≤: {len(Config.SOURCE_CHANNELS)}")
        logging.info(f"üì§ –ü—É–±–ª–∏–∫—É–µ–º –≤: {Config.TARGET_CHANNEL}")
        
        self.is_running = True
        
        while self.is_running:
            try:
                next_run = datetime.now() + timedelta(minutes=Config.CHECK_INTERVAL_MINUTES)
                logging.info(f"‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {next_run.strftime('%H:%M:%S %d.%m.%Y')}")
                
                # –ñ–¥–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                await asyncio.sleep(Config.CHECK_INTERVAL_MINUTES * 60)
                
                if self.is_running:
                    await self.run_news_collection()
                    
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –¥–µ–º–æ–Ω–∞: {e}")
                await asyncio.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def _cleanup_database_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –æ—á–∏—Å—Ç–∫–∏ –ë–î"""
        try:
            logging.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            import sqlite3
            with sqlite3.connect(Config.DATABASE_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    DELETE FROM processed_posts 
                    WHERE processed_date < datetime('now', '-30 days')
                ''')
                deleted_count = cursor.rowcount
                conn.commit()
            logging.info(f"–£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def _health_check_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è"""
        try:
            logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            import sqlite3
            with sqlite3.connect(Config.DATABASE_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT 1")
            logging.debug("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    async def _cleanup_database(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            logging.info("–ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π
            cleanup_query = '''
                DELETE FROM processed_posts 
                WHERE processed_date < datetime('now', '-30 days')
            '''
            
            import sqlite3
            with sqlite3.connect(Config.DATABASE_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute(cleanup_query)
                deleted_count = cursor.rowcount
                conn.commit()
            
            logging.info(f"–û—á–∏—Å—Ç–∫–∞ –ë–î –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {deleted_count}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def _health_check(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram
            is_connected = await self.telegram_client.test_connection()
            
            if not is_connected:
                logging.warning("–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram")
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                await self.telegram_client.initialize()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            try:
                import sqlite3
                with sqlite3.connect(Config.DATABASE_PATH) as conn:
                    cursor = conn.cursor()
                    cursor.execute("SELECT 1")
                logging.debug("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
            except Exception as e:
                logging.error(f"–ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
        if self.is_running:
            logging.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        await self.start_daemon()
    
    def _run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        try:
            while self.is_running:
                schedule.run_pending()
                time.sleep(1)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫"""
        if not self.is_running:
            return
        
        self.is_running = False
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
        try:
            await self.telegram_client.close()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è Telegram –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        
        logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def run_once(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –æ–¥–∏–Ω —Ä–∞–∑ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        try:
            if not await self.initialize():
                return False
            
            await self.run_news_collection()
            await self.telegram_client.close()
            return True
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–º –∑–∞–ø—É—Å–∫–µ: {e}")
            return False
    
    def get_next_run_time(self) -> Optional[datetime]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
        try:
            jobs = schedule.get_jobs()
            if jobs:
                next_run = min(job.next_run for job in jobs)
                return next_run
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞: {e}")
        
        return None
    
    def get_status(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        return {
            'is_running': self.is_running,
            'next_run': self.get_next_run_time(),
            'scheduled_jobs': len(schedule.get_jobs()),
            'thread_alive': self.scheduler_thread.is_alive() if self.scheduler_thread else False
        }
