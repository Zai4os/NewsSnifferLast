#!/usr/bin/env python3
"""
NewsSniffer - Telegram News Forwarder
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
"""

import asyncio
import logging
import signal
import sys
import argparse
from datetime import datetime
import os

from config import Config
from scheduler import NewsScheduler
from telegram_client import TelegramNewsClient

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
    logging.basicConfig(
        level=getattr(logging, Config.LOG_LEVEL),
        format=log_format,
        handlers=[
            logging.FileHandler(Config.LOG_FILE, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )
    
    # –£–º–µ–Ω—å—à–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('telethon').setLevel(logging.WARNING)
    logging.getLogger('urllib3').setLevel(logging.WARNING)

def check_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
    missing_vars = []
    
    if not Config.TELEGRAM_API_ID:
        missing_vars.append('TELEGRAM_API_ID')
    if not Config.TELEGRAM_API_HASH:
        missing_vars.append('TELEGRAM_API_HASH')
    if not Config.TELEGRAM_BOT_TOKEN:
        missing_vars.append('TELEGRAM_BOT_TOKEN')
    if not Config.TARGET_CHANNEL:
        missing_vars.append('TARGET_CHANNEL')
    
    if missing_vars:
        logging.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {', '.join(missing_vars)}")
        logging.error("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –Ω–∞ –æ—Å–Ω–æ–≤–µ .env.example –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è")
        return False
    
    if not Config.SOURCE_CHANNELS:
        logging.warning("–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∫–∞–Ω–∞–ª—ã –≤ config.py")
        return False
    
    return True

async def test_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram"""
    logging.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
    
    client = TelegramNewsClient()
    try:
        if await client.initialize():
            logging.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤
            for channel in Config.SOURCE_CHANNELS:
                info = await client.get_channel_info(channel)
                if info:
                    logging.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel}: {info['title']} ({info.get('participants_count', 'N/A')} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)")
                else:
                    logging.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
            target_info = await client.get_channel_info(Config.TARGET_CHANNEL)
            if target_info:
                logging.info(f"‚úÖ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª {Config.TARGET_CHANNEL}: {target_info['title']}")
            else:
                logging.warning(f"‚ö†Ô∏è –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª {Config.TARGET_CHANNEL} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            await client.close()
            return True
        else:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram")
            return False
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

async def run_once():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –æ–¥–∏–Ω —Ä–∞–∑"""
    logging.info("–ó–∞–ø—É—Å–∫ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π...")
    
    scheduler = NewsScheduler()
    success = await scheduler.run_once()
    
    if success:
        logging.info("‚úÖ –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
    else:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–º —Å–±–æ—Ä–µ –Ω–æ–≤–æ—Å—Ç–µ–π")
    
    return success

def run_daemon():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞"""
    logging.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞...")
    
    scheduler = NewsScheduler()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    def signal_handler(signum, frame):
        logging.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        scheduler.is_running = False
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    async def start_scheduler():
        if await scheduler.initialize():
            await scheduler.start()
        else:
            logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
            sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    try:
        asyncio.run(start_scheduler())
    except KeyboardInterrupt:
        logging.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

def show_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    logging.info("üìä –°—Ç–∞—Ç—É—Å NewsSniffer:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if check_config():
        logging.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
    else:
        logging.error("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        import sqlite3
        with sqlite3.connect(Config.DATABASE_PATH) as conn:
            cursor = conn.cursor()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤
            cursor.execute("SELECT COUNT(*) FROM processed_posts")
            total_posts = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM processed_posts WHERE is_published = 1")
            published_posts = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM channel_settings WHERE is_active = 1")
            active_channels = cursor.fetchone()[0]
            
            logging.info(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {total_posts}")
            logging.info(f"üì∞ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {published_posts}")
            logging.info(f"üì∫ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {active_channels}")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='NewsSniffer - Telegram News Aggregator')
    parser.add_argument('--test', action='store_true', help='–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ')
    parser.add_argument('--once', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π –æ–¥–∏–Ω —Ä–∞–∑')
    parser.add_argument('--daemon', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω–∞')
    parser.add_argument('--status', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã')
    parser.add_argument('--config', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é')
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    
    logging.info("üî• NewsSniffer - Telegram News Forwarder")
    logging.info(f"üìÖ –ó–∞–ø—É—Å–∫: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if not check_config():
        sys.exit(1)
    
    try:
        if args.test:
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            success = asyncio.run(test_connection())
            sys.exit(0 if success else 1)
            
        elif args.once:
            # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –∑–∞–ø—É—Å–∫
            success = asyncio.run(run_once())
            sys.exit(0 if success else 1)
            
        elif args.status:
            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å
            show_status()
            
        elif args.config:
            # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            logging.info("‚öôÔ∏è –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
            logging.info(f"üì∫ –ö–∞–Ω–∞–ª—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {Config.SOURCE_CHANNELS}")
            logging.info(f"üì§ –¶–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª: {Config.TARGET_CHANNEL}")
            logging.info(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {Config.CHECK_INTERVAL_MINUTES} –º–∏–Ω—É—Ç")
            logging.info(f"üóÑÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {Config.DATABASE_PATH}")
            logging.info(f"üìù –õ–æ–≥ —Ñ–∞–π–ª: {Config.LOG_FILE}")
            
        elif args.daemon:
            # –†–µ–∂–∏–º –¥–µ–º–æ–Ω–∞
            run_daemon()
            
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
            parser.print_help()
            
    except KeyboardInterrupt:
        logging.info("üëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
